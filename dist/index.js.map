{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar FLOAT64_EPS = require( '@stdlib/constants-float64-eps' );\nvar FLOAT64_SMALLEST_NORMAL = require( '@stdlib/constants-float64-smallest-normal' );\nvar FLOAT64_MIN_EXPONENT = require( '@stdlib/constants-float64-min-base2-exponent' );\nvar FLOAT64_MAX_EXPONENT = require( '@stdlib/constants-float64-max-base2-exponent' );\nvar FLOAT64_MAX = require( '@stdlib/constants-float64-max' );\nvar FLOAT64_PRECISION = require( '@stdlib/constants-float64-precision' );\nvar lowercase = require( '@stdlib/string-base-lowercase' );\n\n\n// VARIABLES //\n\nvar RADIX = 2.0;\n\n\n// MAIN //\n\n/**\n* Determines double-precision floating-point machine parameters.\n*\n* ## Notes\n*\n* -   The `cmach` parameter is a string which specifies the double-precision machine parameter to be returned. The function recognizes the following characters:\n*\n*     -   `'E'`/`'e'`: (eps) relative machine precision.\n*     -   `'S'`/`'s'`: (sfmin) safe minimum such that `1/sfmin` does not overflow.\n*     -   `'B'`/`'b'`: (base) base of the machine (also known as the floating-point radix).\n*     -   `'P'`/`'p'`: (prec) `eps*base`.\n*     -   `'N'`/`'n'`: (t) number of (base) digits in the mantissa.\n*     -   `'R'`/`'r'`: (rnd) `1.0` when rounding occurs in addition and `0.0` otherwise.\n*     -   `'M'`/`'m'`: (emin) minimum exponent before (gradual) underflow.\n*     -   `'U'`/`'u'`: (rmin) underflow threshold.\n*     -   `'L'`/`'l'`: (emax) largest exponent before overflow.\n*     -   `'O'`/`'o'`: (rmax) overflow threshold.\n*\n* @param {string} cmach - specifies the value to be returned\n* @returns {number} machine parameter\n*\n* @example\n* var out = dlamch( 'E' );\n* // returns ~1.1102230246251565e-016\n*\n* out = dlamch( 'S' );\n* // returns ~2.2250738585072014e-308\n*\n* out = dlamch( 'B' );\n* // returns 2.0\n*/\nfunction dlamch( cmach ) {\n\tcmach = lowercase( cmach.charAt( 0 ) );\n\tif ( cmach === 'e' ) {\n\t\treturn FLOAT64_EPS * 0.5;\n\t}\n\tif ( cmach === 's' ) {\n\t\treturn FLOAT64_SMALLEST_NORMAL;\n\t}\n\tif ( cmach === 'b' ) {\n\t\treturn RADIX;\n\t}\n\tif ( cmach === 'p' ) {\n\t\treturn FLOAT64_EPS * 0.5 * RADIX;\n\t}\n\tif ( cmach === 'n' ) {\n\t\treturn FLOAT64_PRECISION;\n\t}\n\tif ( cmach === 'r' ) {\n\t\treturn 1.0;\n\t}\n\tif ( cmach === 'm' ) {\n\t\treturn FLOAT64_MIN_EXPONENT + 1;\n\t}\n\tif ( cmach === 'u' ) {\n\t\treturn FLOAT64_SMALLEST_NORMAL;\n\t}\n\tif ( cmach === 'l' ) {\n\t\treturn FLOAT64_MAX_EXPONENT + 1;\n\t}\n\tif ( cmach === 'o' ) {\n\t\treturn FLOAT64_MAX;\n\t}\n\treturn 0.0;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dlamch;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Determine double-precision floating-point machine parameters.\n*\n* @module @stdlib/lapack-base-dlamch\n*\n* @example\n* var dlamch = require( '@stdlib/lapack-base-dlamch' );\n*\n* var out = dlamch( 'E' );\n* // returns ~1.1102230246251565E-016\n*\n* out = dlamch( 'S' );\n* // returns ~2.2250738585072014E-308\n*\n* out = dlamch( 'B' );\n* // returns 2.0\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,+BAAgC,EACvDC,EAA0B,QAAS,2CAA4C,EAC/EC,EAAuB,QAAS,8CAA+C,EAC/EC,EAAuB,QAAS,8CAA+C,EAC/EC,EAAc,QAAS,+BAAgC,EACvDC,EAAoB,QAAS,qCAAsC,EACnEC,EAAY,QAAS,+BAAgC,EAKrDC,EAAQ,EAoCZ,SAASC,EAAQC,EAAQ,CAExB,OADAA,EAAQH,EAAWG,EAAM,OAAQ,CAAE,CAAE,EAChCA,IAAU,IACPT,EAAc,GAEjBS,IAAU,IACPR,EAEHQ,IAAU,IACPF,EAEHE,IAAU,IACPT,EAAc,GAAMO,EAEvBE,IAAU,IACPJ,EAEHI,IAAU,IACP,EAEHA,IAAU,IACPP,EAAuB,EAE1BO,IAAU,IACPR,EAEHQ,IAAU,IACPN,EAAuB,EAE1BM,IAAU,IACPL,EAED,CACR,CAKAL,EAAO,QAAUS,ICnEjB,IAAIE,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "FLOAT64_EPS", "FLOAT64_SMALLEST_NORMAL", "FLOAT64_MIN_EXPONENT", "FLOAT64_MAX_EXPONENT", "FLOAT64_MAX", "FLOAT64_PRECISION", "lowercase", "RADIX", "dlamch", "cmach", "main"]
}
